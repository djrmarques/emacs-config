* Which Key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :init
  (which-key-mode)
  )
#+END_SRC

* Theme
  #+BEGIN_SRC 
  (use-package zenburn-theme
  :ensure t
  :init
  (load-theme 'zenburn t)
)

  #+END_SRC
  
* Fonts
  #+BEGIN_SRC 
  (set-frame-font "Hack-14" nil t)
  #+END_SRC
* Messages buffer
  Hide Messages buffer
  #+BEGIN_SRC emacs-lisp
  (setq-default message-log-max nil)
  (kill-buffer "*Messages*")
  #+END_SRC
* Buffers
** Kill all buffers
#+BEGIN_SRC emacs-lisp
  (defun kill-all-buffers()
  (interactive)
  (mapc 'kill-buffer (buffer-list))
  )
#+END_SRC
   
* Beacon mode
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :init
    (beacon-mode 1))
#+END_SRC

* Magit
  #+BEGIN_SRC emacs-lisp
    (use-package evil-magit
    :ensure t
    :config
    (global-set-key (kbd "s-m") 'magit)
    )
  #+END_SRC

* Org Mode
** Evil Org
   #+BEGIN_SRC emacs-lisp
     (use-package evil-org
     :ensure t
     :init
     (add-hook 'org-mode-hook 'evil-org-mode))
   #+END_SRC
** Agenda
   #+BEGIN_SRC emacs-lisp
     (defun org-agenda-show-agenda-and-todo (&optional arg)
       (interactive "P")
       (org-agenda arg "n")
       )
       (global-set-key (kbd "<f5>") 'org-agenda-show-agenda-and-todo)

   #+END_SRC
** Org Babel
   #+BEGIN_SRC emacs-lisp
   (org-babel-do-load-languages 'org-babel-load-languages '((python . t)))
   #+END_SRC
* Powerline 
  #+BEGIN_SRC emacs-lisp
      (use-package telephone-line
      :ensure t
      :init 
      (telephone-line-mode t)
      )
  
  #+END_SRC
* Ido Mode
  #+BEGIN_SRC emacs-lisp
    (setq ido-enable-flex-matching t)
    (setq ido-everywhere t)
    (ido-mode 1)
  #+END_SRC
* Company Mode
  #+BEGIN_SRC emacs-lisp
  (use-package company
  :ensure t
  :init 
  (add-hook 'after-init-hook 'global-company-mode)
)
  #+END_SRC
* Ansi-Term
  #+BEGIN_SRC emacs-lisp
    (setq explicit-shell-file-name "/bin/bash")
  
    (defvar my-term-shell "/bin/bash")
    (defadvice ansi-term (before force-bash)
      (interactive (list my-term-shell)))
    (ad-activate 'ansi-term)

    (global-set-key (kbd "<s-return>") 'ansi-term)
  #+END_SRC
* Dashboard
  #+BEGIN_SRC emacs-lisp
  (use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook))
  #+END_SRC
* Python
** Install Elpy
  #+BEGIN_SRC emacs-lisp
    (use-package elpy
	:ensure t
	:init
	(elpy-enable)
	:config
	(setenv "IPY_TEST_SIMPLE_PROMPT" "1")
	(setq python-shell-interpreter "ipython3"
	    python-shell-interpreter-args "-i")
	(setq elpy-rpc-python-command "python3")
    )
    
  #+END_SRC
** Variables
   #+BEGIN_SRC emacs-lisp
   (setq python-indent-offset 4)
   (setq indent-tabs-mode nil)
   #+END_SRC
* Linum Mode
  #+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-l") 'linum-mode)
  #+END_SRC
* Hydra
  #+BEGIN_SRC emacs-lisp
      (use-package hydra
      :ensure t
      )


    (defun get-org-conf ()
      (interactive)
      (find-file org-config-file)
      )
      
    (defun get-init ()
      (interactive)
      (find-file init-file)
      )
      

    (defhydra hydra-files (global-map "<f2>")
      "Find Files"
      ("c" get-org-conf "Find org conf")
      ("i" get-init "Find org conf")
      ("k" kill-all-buffers "Kill al buffers")
)

  #+END_SRC
