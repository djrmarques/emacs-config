
* Which Key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :init
  (which-key-mode)
  )
#+END_SRC

* Beacon mode
#+BEGIN_SRC emacs-lisp
(use-package beacon
  :ensure t
  :init
  (beacon-mode 1))
#+END_SRC

* Magit
  #+BEGIN_SRC emacs-lisp
    (use-package evil-magit
    :ensure t
    :config
    (global-set-key (kbd "s-m") 'magit)
    )
  #+END_SRC

* Org Mode
** Evil Org
   #+BEGIN_SRC emacs-lisp
     (use-package evil-org
     :ensure t
     :init
     (add-hook 'org-mode-hook 'evil-org-mode))
   #+END_SRC
* Powerline 
  #+BEGIN_SRC emacs-lisp
      (use-package telephone-line
      :ensure t
      :init 
      (telephone-line-mode t)
      )
  
  #+END_SRC
* Ido Mode
  #+BEGIN_SRC emacs-lisp
    (setq ido-enable-flex-matching t)
    (setq ido-everywhere t)
    (ido-mode 1)
  #+END_SRC
* Company Mode
  #+BEGIN_SRC emacs-lisp
  (use-package company
  :ensure t
  :init 
  (add-hook 'after-init-hook 'global-company-mode)
)
  #+END_SRC
* Ansi-Term
  #+BEGIN_SRC emacs-lisp
    (setq explicit-shell-file-name "/bin/bash")
  
    (defvar my-term-shell "/bin/bash")
    (defadvice ansi-term (before force-bash)
      (interactive (list my-term-shell)))
    (ad-activate 'ansi-term)

    (global-set-key (kbd "<s-return>") 'ansi-term)
  #+END_SRC
* Dashboard
  #+BEGIN_SRC emacs-lisp
  (use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook))
  #+END_SRC
