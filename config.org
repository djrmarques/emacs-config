* Which Key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :init
  (which-key-mode)
  )
#+END_SRC

* Theme
  #+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
  :ensure t
  :init
  (load-theme 'zenburn t)
)

  #+END_SRC
  
* Editing
** Yank Line
  #+begin_src emacs-lisp
  (defun yank-line ()
  "Yanks current line"
  (interactive)
  (call-interactively 'move-end-of-line)
  (call-interactively 'set-mark-command)
  (call-interactively 'move-beginning-of-line)
  (call-interactively 'kill-region)
  (call-interactively 'yank)
)
  #+end_src
** Quote word
   #+begin_src emacs-lisp
   #+end_src

* Fonts
  #+BEGIN_SRC emacs-lisp
  (set-frame-font "Hack-14" nil t)
  #+END_SRC
* Messages buffer
  Hide Messages buffer
  #+BEGIN_SRC emacs-lisp
  (setq-default message-log-max nil)
  (kill-buffer "*Messages*")
  #+END_SRC
* Buffers
** Kill all buffers
#+BEGIN_SRC emacs-lisp
  (defun kill-all-buffers()
  (interactive)
  (mapc 'kill-buffer (buffer-list))
  )
#+END_SRC
** Kill all buffers except current
   #+BEGIN_SRC emacs-lisp
(defun kill-other-buffers() 
  (interactive)
  (mapc 'kill-buffer (delq (current-buffer) (buffer-list)))
)
   #+END_SRC
* Beacon mode
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :init
    (beacon-mode 1))
#+END_SRC

* Magit
  #+BEGIN_SRC emacs-lisp
    (use-package magit
    :ensure t
    :config
    (global-set-key (kbd "s-m") 'magit)
    )
  #+END_SRC

* Org Mode
** Agenda
   #+BEGIN_SRC emacs-lisp
     (defun org-agenda-show-agenda-and-todo (&optional arg)
       (interactive "P")
       (org-agenda arg "n")
       )
       (global-set-key (kbd "<f5>") 'org-agenda-show-agenda-and-todo)
       

   #+END_SRC
** Org Babel
   #+BEGIN_SRC emacs-lisp
   (org-babel-do-load-languages 'org-babel-load-languages '((python . t)))
   (setq org-babel-python-command "python3")
   #+END_SRC

** Org source window
   #+BEGIN_SRC emacs-lisp
     (setq org-src-window-setup 'current-window)
   #+END_SRC
** Org Publish
*** Define the alist
   #+begin_src emacs-lisp
   (setq publish-directory-path "~/Projects/dest_blog/")
   
   (setq org-publish-project-alist
      '(("org-notes"
         :base-directory "~/Projects/blog/"
         :base-directory ".org"
         :publishing-directory "~/Projects/djrmarques.github.io/"
	 :recursive t
         :section-numbers nil
         :table-of-contents nil
	 :publishing-function org-html-publish-to-html)
	 ("org-static"
	 :base-directory "~/org/"
	 :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
	 :publishing-directory publish-directory-path
	 :recursive t
	 :publishing-function "~/Projects/djrmarques.github.io/"
	 )
	 ("org" :components ("org-notes" "org-static"))
))

   #+end_src
*** Set Publish Hotkey
    #+begin_src emacs-lisp
      (defun publish-and-view()
	(interactive)
	(org-publish "org")
	)

      (defun view-project()
	(interactive)
	(start-process-shell-command "view-index" nil "next ~/Projects/djrmarques.github.io/index.html")
	)

      (defhydra blog-hydra (global-map "<f6>")
	"Hydra for saving the blog posts"
	("p" publish-and-view "Publish website and view")
	)
    #+end_src
* Powerline 
  #+BEGIN_SRC emacs-lisp
      (use-package telephone-line
      :ensure t
      :init 
      (telephone-line-mode t)
      )
  #+END_SRC
** Display Time
   #+BEGIN_SRC emacs-lisp
   (setq display-time-24h-format t)
   (display-time-mode 1)
   #+END_SRC
* Company Mode
  #+BEGIN_SRC emacs-lisp
  (use-package company
  :ensure t
  :init 
  (add-hook 'after-init-hook 'global-company-mode)
)
  #+END_SRC
* Ansi-Term
  #+BEGIN_SRC emacs-lisp
    (setq explicit-shell-file-name "/bin/bash")
    
    (defvar my-term-shell "/bin/bash")
    (defadvice ansi-term (before force-bash)
      (interactive (list my-term-shell)))
    (ad-activate 'ansi-term)

    (global-set-key (kbd "<s-return>") 'ansi-term)
  #+END_SRC
* Dashboard
  #+BEGIN_SRC emacs-lisp
  (use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook))
  #+END_SRC
* Programming general
** Rainbow Delimiters
  #+BEGIN_SRC emacs-lisp
    (use-package rainbow-delimiters
      :ensure t
      :config
      (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
      )

  #+END_SRC
** Smart Parens
   #+BEGIN_SRC emacs-lisp
   (use-package smartparens
   :ensure t
   :init
   (add-hook 'prog-mode-hook #'smartparens-mode)
   )
   #+END_SRC
** Linum Mode
   #+BEGIN_SRC emacs-lisp
     (add-hook 'prog-mode-hook 'linum-mode)
   #+END_SRC
** Flycheck
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :ensure t
       :init (global-flycheck-mode)
     )
   #+END_SRC
* Python
** Install Elpy
  #+BEGIN_SRC emacs-lisp
    (use-package elpy
	:ensure t
	:init
	(elpy-enable)
	:config
	(setenv "IPY_TEST_SIMPLE_PROMPT" "1")
	(setq python-shell-interpreter "ipython3"
	    python-shell-interpreter-args "-i")
	(setq elpy-rpc-python-command "python3")
    )
    
  #+END_SRC
** Variables
   #+BEGIN_SRC emacs-lisp
   (setq python-indent-offset 4)
   (setq indent-tabs-mode nil)
   #+END_SRC
** Jedi
   #+BEGIN_SRC emacs-lisp
     (use-package company-jedi
     :ensure t
     )
     (defun my/python-mode-hook ()
       (add-to-list 'company-backends 'company-jedi)
       )

     (add-hook 'python-mode-hook 'my/python-mode-hook)

   #+END_SRC
* Hydra
  #+BEGIN_SRC emacs-lisp
	  (use-package hydra
	  :ensure t
	  )


	(defun get-org-conf ()
	  (interactive)
	  (find-file org-config-file)
	  )
      
	(defun get-init ()
	  (interactive)
	  (find-file init-file)
	  )
      
	(defun get-stump ()
	  (interactive)
	  (find-file stumpwmconfig)
	  )
      

	(defhydra hydra-files (global-map "<f2>")
	  "Find Files"
	  ("c" get-org-conf "Find org conf")
	  ("i" get-init "Find org conf")
	  ("k" kill-all-buffers "Kill al buffers")
	  ("o" kill-other-buffers "Kill al buffers")
	  ("s" get-stump "Stump config")
    )

  #+END_SRC
* Ivy
** Install libraries
  #+BEGIN_SRC emacs-lisp
  (use-package swiper
  :ensure t
  )
  
  (use-package counsel
  :ensure t
  )

  (use-package ivy
  :ensure t
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)
  ;; enable this if you want `swiper' to use it
  ;; (setq search-default-mode #'char-fold-to-regexp)
  (global-set-key (kbd "C-s") 'swiper)
  (global-set-key (kbd "C-c C-r") 'ivy-resume)
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  (global-set-key (kbd "<f1> f") 'counsel-describe-function)
  (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
  (global-set-key (kbd "<f1> l") 'counsel-find-library)
  (global-set-key (kbd "C-c g") 'counsel-git)
  (global-set-key (kbd "C-c j") 'counsel-git-grep)
  (global-set-key (kbd "C-c k") 'counsel-yank-pop)
  (global-set-key (kbd "C-x l") 'counsel-locate)
  (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
  )
  
  #+END_SRC
** Add advice to remeber the last used
   #+begin_src emacs-lisp
     (defun my-demo-function ()
       (setq last-counsel-M-x-command (caar command-history)))

     (advice-add #'counsel-M-x :after #'my-demo-function) 
   #+end_src
* Common Lisp
  #+BEGIN_SRC emacs-lisp
  (use-package sly
  :ensure t
  )
  #+END_SRC
* Manual search
  Function to search for manuals Eg
** Generic function
  #+begin_src emacs-lisp
    (defun search-index-manual(man-name)
    "Searches the index of a specific manual inserted as argument"
    (interactive)
    (info man-name)
    (call-interactively 'Info-index)
)
  #+end_src
  
** Bindings
  #+begin_src emacs-lisp
      (defun stumpwm-index-search()
      "Searches the StumpWM manual index"
      (interactive)
      (let ((word-to-yank (thing-at-point 'word)))
      (kill-new word-to-yank)
      (search-index-manual "StumpWM")
      )
    )
  #+end_src
* AMX
  #+begin_src emacs-lisp
  (use-package amx
  :ensure t
  :init
  (amx-mode))
  #+end_src




